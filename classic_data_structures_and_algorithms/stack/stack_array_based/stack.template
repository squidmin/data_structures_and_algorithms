// FILE: stack.template
// TEMPLATE CLASS IMPLEMENTED: my_stack<Item> (see stack.h for documentation)
// This file is included in the header file, and not compiled separately.
// INVARIANT for the stack class:
//   1. The number of items in the stack is in the member variable used.
//   2. The actual items of the stack are stored in a partially-filled
//      array data[0]..data[used-1]. The stack elements appear from the
//      bottom (at data[0]) to the top (at data[used-1]).

#include <cassert>  // Provides assert

namespace jamesrmorse
{
	template <class Item>
	const typename my_stack<Item>::size_type my_stack<Item>::CAPACITY;

	template <class Item>
	void my_stack<Item>::push(const Item& entry)
	// Library facilities used: cassert
	{
	   assert(size( ) < CAPACITY);
	   data[used] = entry;
	   ++used;
	}

	template <class Item>
	void my_stack<Item>::pop()
	// Library facilities used: cassert
	{
	   assert(!empty());
	   --used;
	}

	template <class Item>
	Item my_stack<Item>::top() const
	// Library facilities used: cassert
	{
	   assert(!empty());
	   return data[used - 1];
	}
}
